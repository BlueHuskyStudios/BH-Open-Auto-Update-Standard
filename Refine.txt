The Blue Automation for Renewing Code (The BARC‏ /ðə bɑrk/)

MAJOR GOALS:
1: To end, once and for all, dialogs that say "click here to go to our website to download the latest version"
2: To make it easier for developers to implement internal updaters, with optional automation
3: To make it easy for power users to manually check for updates without the aid of the program in question

IMPLOREMENTS:
- Implementing The BARC means that you wish to make updating easy for your user. You are implored to make it so easy that they
  do not even know it is happening. As such, you are implored to make this an automatic background process, and require little
  to no input form the user to initiate and completely carry out the process.
	- To keep the user happy, you are implored to provide them with preferences that allow them to change the behavior of the
	  auto-update process. We recommend including options that let them turn it off, provide feedback when an update is
	  ready/applying/applied, whether to install right after downloading or wait for user confirmation, et cetera.
- Participating in use of The BARC means that you agree that open standards are good things. As such, you are implored to help
  out by offering your comments, submitting any changed code, and adhering to the included license.


CORE TECHNOLOGIES:
- JSON (to hold data in transmission)
- HTTP(S) or (S)FTP (to transmit the JSON data)

ROADMAP:
1: Preparation
	1: Research the typical items that are updated when a program needs an update
	2: Ensure that JSON is, indeed, the best medium to communicate an update's details
	3: Ensure that the standard is easily implementable
	4: Outline the process that a program would go through to implement The BARC
2: Prototyping (Lambda)
	1: Set up an environment that can handle all the requirements
	2: Create a crude implementation of the system to prove the concept
	3: Refine the proof-of-concept until it works reliably in several scenarios
3: Presentation
	1: Present the system to several parties familiar with systems that update software
	2: Use their feedback to continue to refine the system
4: Back to the definition
	1: Ensure all changes made stay within the bounds of the definition. Any discrepancies should be examined as essential and,
	   if so, the definition should be changed as such.
5: Alpha
	1: Create a system that works outside of the test environment
	2: Put the system and definition up as an open-source Alpha version of The BARC, alongside an issue tracker
	3: Take any and all issues into consideration
6: Beta
	1: Refine the system and definition as needed, using the given issues as useful feedback
	2: Put the system and definition up as an open-source Beta version of The BARC, alongside an issue tracker
	3: Take any and all issues into consideration
7: Stable
	1: Release the definition 1.0 alongside an issue tracker
	2: Release the implementation as a separate product
	3: Begin production on multiple implementations in multiple languages for multiple platforms

REQUEST IDEA:
A request need only require the following:
- The version of BARC MUST be provided as close as possible to the beginning of the transmission, as a key-value pair, where
  the key is "BARC" and the value is the current version. The format of the version number must be precisely the exact same as
  the official version number. This is done so the parser knows exactly what to expect. For instance, different transmissions
  in the same version of BARC should be encoded in the same character encoding (likely UTF-8 or UTF-16).
- The overall current version number of the app. This is completely arbitrary, but should be easily comparable.

RESPONSE IDEA:
A response includes ([OPT] == optional):

- The version of BARC MUST be provided as close as possible to the beginning of the transmission, as a key-value pair, where
  the key is "BARC" and the value is the current version. The format of the version number must be precisely the exact same as
  the official version number. This is done so the parser knows exactly what to expect. For instance, different transmissions
  in the same version of BARC should be encoded in the same character encoding (likely UTF-8 or UTF-16).
- [OPT] The name of this version.
- The overall version number of the update. This is completely arbitrary, but should be easily comparable.
- A changelog consisting of an array of one or more single-pair objects whose keys are single-character symbols and values are
  fulltext descriptions.
	- + indicates something was added
	- - indicates something was removed
	- ! indicates something was fixed
	- . indicates something was changed
	- x indicates a problem was found but not fixed
- [OPT] Requirements, which indicate what is needed to apply the update. If these are met, the update should proceed. If they
  are not, the program can decide whether to give an error, install the requirements, or attempt the update anyway. The value
  of this can be either a single string indicating the name of a required item, or an object containing the following:
	- The name of the required items.
	- The version number of the required item, with the same spec as the above definition.
	- [OPT] A boolean indicating whether the provided version must be exactly the same as the installed one. If this is
	  omitted, it is assumed that a higher version will do.
- A list of packages to be downloaded, consisting of an array of objects, each with the following:
	- [OPT] The name of the package
	- A URI indicating from where to download the package
	- Where to download to: A URI whose root is the application install folder ("/" might mean "C:/Program Files/My App/")
	- [OPT] the language of the package in ISO 639-1 format. This may indicate that the package may be skipped based on user
	  preferences.
	- [OPT] The version number of the package, with the same spec as the above definition.
	- [OPT] The importance of the package, with 0 being the most important. If omitted, 0 is assumed. This may indicate that
	the package may be skipped if an error occurs or if one of the requirements is not met.
	- [OPT] A list of requirements, with the same spec as the above definition.
